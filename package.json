{
  "name": "sneakmax",
  "version": "1.0.0",
  "description": "1. Для начала инициализируем наш проект: ```sh npm init -y ``` 2. После инициализации установим два пакета ```sh npm i -D webpack webpack-cli ``` 3. Устанавливаем webpack-dev-server ```sh npm i -D webpack-dev-server ``` 4. Устанавливаем  html-webpack-plugin ```sh npm i -D html-loader html-webpack-plugin ``` 5. Устанавливаем  mini-css-extract-plugin ```sh npm i -D mini-css-extract-plugin css-loader sass-loader sass postcss postcss-preset-env postcss-loader ``` 6. Устанавливаем  babel-loader ```sh npm i -D @babel/core @babel/preset-env babel-loader ``` 7. В корне проекта создаем: - src - папку для файлов приложения - webpack.config.js - конфигурационный файл webpack. 8. Также для разработки будем использовать devtool:  ```sh  devtool: \"inline-source-map\" ``` 9. Теперь перейдем в файл package.json и создадим скрипты для нашего проекта: ```sh \"start\": \"webpack serve\", // Запускает webpack-dev-server \"build\": \"webpack\", // Собирает проект в режиме разработки \"build-prod\": \"webpack --mode=production\", // собирает проект для продакшена \"clean\": \"rd /s /q dist\" // удаляет директорию dist ``` 10. Режим сборки указывается в свойстве mode: development и production ```sh let mode = \"development\"; // По умолчанию режим development if (process.env.NODE_ENV === \"production\") {   mode = \"production\"; // Режим production, если при запуске вебпака было указано --mode=production } ```     11. Ассеты: assetModuleFilename: 'assets/[hash][ext][query]' ```sh output: {  path: path.resolve(__dirname, \"dist\"),  assetModuleFilename: \"assets/[hash][ext][query]\", // Все ассеты будут складываться в dist/assets  clean: true, }, ``` 12. Добавляем  .browserslistrc ```sh > 0.5% # На браузер должно приходится не менее 0.5% пользователей not dead # Браузеры с официальной поддержкой ``` 13. Добавляем поддержку изображений и шрифтов ```sh {  test: /\\.(png|jpe?g|gif|svg|webp|ico)$/i,  type: mode === \"production\" ? \"asset\" : \"asset/resource\", }, {  test: /\\.(woff2?|eot|ttf|otf)$/i,  type: \"asset/resource\", }, ``` 14. .gitignore ```sh /dist /node_modules ```",
  "main": "index.js",
  "scripts": {
    "start": "webpack serve",
    "build": "webpack",
    "build-prod": "webpack --mode=production",
    "clean": "rd /s /q dist"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "devDependencies": {
    "@babel/core": "^7.24.0",
    "@babel/preset-env": "^7.24.0",
    "babel-loader": "^9.1.3",
    "css-loader": "^6.10.0",
    "html-loader": "^5.0.0",
    "html-webpack-plugin": "^5.6.0",
    "mini-css-extract-plugin": "^2.8.1",
    "postcss": "^8.4.35",
    "postcss-loader": "^8.1.1",
    "postcss-preset-env": "^9.5.1",
    "sass": "^1.72.0",
    "sass-loader": "^14.1.1",
    "style-loader": "^3.3.4",
    "webpack": "^5.90.3",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.0.3"
  }
}
